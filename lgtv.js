const express = require("express");
const axios = require("axios");
const WebSocket = require("ws");

const app = express();
const PORT = 3001;

app.use(express.json());

let globalWs = null;
let globalClientKey = null;
let connectedIP = null;

// H√†m kh·ªüi t·∫°o k·∫øt n·ªëi WebSocket
function initializeWebSocket(ip) {
    if (globalWs && globalWs.readyState === WebSocket.OPEN) {
        return; // N·∫øu ƒë√£ c√≥ k·∫øt n·ªëi v√† ƒëang m·ªü th√¨ kh√¥ng c·∫ßn t·∫°o m·ªõi
    }

    globalWs = new WebSocket(`ws://${ip}:3000`);
    connectedIP = ip;

    globalWs.on("open", () => {
        console.log(`üîó K·∫øt n·ªëi ƒë·∫øn TV ${ip} th√†nh c√¥ng!`);
    });

    globalWs.on("message", (data) => {
        const message = JSON.parse(data);
        console.log("üì© Ph·∫£n h·ªìi t·ª´ TV:", message);

        if (message.type === "registered" && message.payload?.["client-key"]) {
            globalClientKey = message.payload["client-key"];
            console.log("‚úÖ ƒê√£ nh·∫≠n client-key:", globalClientKey);
        }
    });

    globalWs.on("error", (err) => {
        console.error("‚ö†Ô∏è L·ªói k·∫øt n·ªëi TV:", err.message);
    });

    globalWs.on("close", () => {
        console.log(`üîå K·∫øt n·ªëi ƒë√£ ƒë√≥ng`);
        globalWs = null;
        // C√≥ th·ªÉ th√™m logic t·ª± ƒë·ªông k·∫øt n·ªëi l·∫°i ·ªü ƒë√¢y n·∫øu c·∫ßn
    });
}

// API 1: Qu√©t TV LG WebOS trong m·∫°ng
app.get("/scan-tvs", async (req, res) => {
    console.log("SCAN TV");
    const baseIP = "192.168.1."; // Thay ƒë·ªïi theo m·∫°ng c·ªßa b·∫°n


    // for (let i = 10; i <= 12; i++) {
    const ip = `${baseIP}${12}`;
    try {
        console.log("SCAN TV", ip);
        await axios.get(`http://${ip}:3000`, { timeout: 1000 });
        console.log(`T√¨m th·∫•y TV t·∫°i: ${ip}`);
        res.json({ tvs: [ip] });
    } catch (error) {
        // console.log("SCAN TV", error);
        // Kh√¥ng ph·∫£n h·ªìi, b·ªè qua
    }
    // }


});

// API 2: Gh√©p n·ªëi TV b·∫±ng WebSocket
app.post("/pair-tv", async (req, res) => {
    const { ip } = req.body;
    if (!ip) return res.status(400).json({ error: "Thi·∫øu IP TV" });

    initializeWebSocket(ip);

    // ƒê·ª£i k·∫øt n·ªëi ƒë∆∞·ª£c thi·∫øt l·∫≠p
    await new Promise(resolve => setTimeout(resolve, 1000));

    if (!globalWs || globalWs.readyState !== WebSocket.OPEN) {
        return res.status(500).json({ error: "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn TV" });
    }

    const pairingRequest = {
        type: "register",
        id: "register_0",
        payload: {
            forcePairing: false,
            manifest: {
                appVersion: "1.0",
                permissions: [
                    "CONTROL_CHANNEL", // üî• Th√™m quy·ªÅn ƒë·ªïi k√™nh
                    "CONTROL_INPUT_TEXT",
                    "CONTROL_AUDIO",         // ƒêi·ªÅu khi·ªÉn √¢m thanh (tƒÉng/gi·∫£m √¢m l∆∞·ª£ng, t·∫Øt ti·∫øng)
                    "CONTROL_POWER",         // T·∫Øt TV
                    "CONTROL_INPUT_TV",      // Chuy·ªÉn ƒë·ªïi ngu·ªìn ƒë·∫ßu v√†o
                    "CONTROL_INPUT_MEDIA_PLAYBACK", // ƒêi·ªÅu khi·ªÉn ph√°t video (Play/Pause/Stop)
                    "READ_INSTALLED_APPS",   // ƒê·ªçc danh s√°ch ·ª©ng d·ª•ng ƒë√£ c√†i
                    "LAUNCH",                // Kh·ªüi ch·∫°y ·ª©ng d·ª•ng
                    "LAUNCH_WEBAPP",         // Kh·ªüi ch·∫°y ·ª©ng d·ª•ng web
                    "APP_TO_APP",            // Chuy·ªÉn ƒë·ªïi gi·ªØa c√°c ·ª©ng d·ª•ng
                    "CONTROL_CAMERA",        // ƒêi·ªÅu khi·ªÉn camera
                    "CONTROL_RECORDING",     // ƒêi·ªÅu khi·ªÉn ghi h√¨nh
                    "CONTROL_TV_SCREEN",     // ƒêi·ªÅu khi·ªÉn m√†n h√¨nh TV (B·∫≠t/t·∫Øt hi·ªÉn th·ªã)
                    "CONTROL_REMOTE",        // ƒêi·ªÅu khi·ªÉn t·ª´ xa (gi·∫£ l·∫≠p b·∫•m n√∫t tr√™n remote)
                    "READ_CHANNEL_INFO",     // ƒê·ªçc th√¥ng tin k√™nh TV
                    "READ_CURRENT_CHANNEL",  // ƒê·ªçc k√™nh hi·ªán t·∫°i
                    "WRITE_NOTIFICATION_TOAST", // Hi·ªÉn th·ªã th√¥ng b√°o tr√™n TV
                    "READ_INPUT_DEVICE_LIST", // ƒê·ªçc danh s√°ch thi·∫øt b·ªã ƒë·∫ßu v√†o
                    "READ_NETWORK_STATE",    // ƒê·ªçc tr·∫°ng th√°i m·∫°ng
                    "READ_TV_INFO",          // ƒê·ªçc th√¥ng tin TV
                    "READ_POWER_STATE",      // ƒê·ªçc tr·∫°ng th√°i b·∫≠t/t·∫Øt c·ªßa TV
                    "READ_SOUND_OUTPUT",     // ƒê·ªçc ƒë·∫ßu ra √¢m thanh
                    "READ_SYSTEM_INFO",      // ƒê·ªçc th√¥ng tin h·ªá th·ªëng
                    "WRITE_SCREEN",          // ƒêi·ªÅu khi·ªÉn hi·ªÉn th·ªã m√†n h√¨nh
                    "CONTROL_MOUSE_AND_KEYBOARD", // ƒêi·ªÅu khi·ªÉn chu·ªôt v√† b√†n ph√≠m
                    "CONTROL_PLAYBACK"
                ],
                appId: "com.yourcompany.remote"
            }
        }
    };

    let responseSent = false;

    const messageHandler = (data) => {
        const message = JSON.parse(data);
        if (message.type === "response" && message.payload?.["client-key"] && !responseSent) {
            responseSent = true;
            res.json({
                message: "‚úÖ Gh√©p n·ªëi th√†nh c√¥ng",
                clientKey: message.payload["client-key"]
            });
            globalWs.removeListener("message", messageHandler);
        }
    };

    globalWs.on("message", messageHandler);
    globalWs.send(JSON.stringify(pairingRequest));

    // Timeout
    setTimeout(() => {
        if (!responseSent) {
            res.status(500).json({ error: "TV kh√¥ng ph·∫£n h·ªìi" });
            globalWs.removeListener("message", messageHandler);
        }
    }, 20000);
});

// API 3: ƒêi·ªÅu khi·ªÉn TV
app.post("/control-tv", async (req, res) => {
    const { ip, command, payload = {} } = req.body;
    if (!ip || !command) return res.status(400).json({ error: "Thi·∫øu IP ho·∫∑c command" });

    // Ki·ªÉm tra xem c√≥ ƒëang k·∫øt n·ªëi ƒë·∫øn ƒë√∫ng TV kh√¥ng
    if (ip !== connectedIP || !globalWs || globalWs.readyState !== WebSocket.OPEN) {
        initializeWebSocket(ip);
        await new Promise(resolve => setTimeout(resolve, 1000));
    }

    if (!globalClientKey) {
        return res.status(400).json({ error: "TV ch∆∞a ƒë∆∞·ª£c gh√©p n·ªëi" });
    }

    // const commands = {
    //     powerOff: 'ssap://system/turnOff', // T·∫Øt TV
    //     volumeUp: 'ssap://audio/volumeUp', // TƒÉng √¢m l∆∞·ª£ng
    //     volumeDown: 'ssap://audio/volumeDown', // Gi·∫£m √¢m l∆∞·ª£ng
    //     mute: 'ssap://audio/setMute', // T·∫Øt ti·∫øng
    //     channelUp: 'ssap://tv/channelUp', // Chuy·ªÉn k√™nh l√™n
    //     channelDown: 'ssap://tv/channelDown', // Chuy·ªÉn k√™nh xu·ªëng
    //     home: 'ssap://com.webos.service.ime/sendEnterKey', // V·ªÅ m√†n h√¨nh ch√≠nh
    //     back: 'ssap://com.webos.service.ime/sendBackKey', // Quay l·∫°i
    //     enter: 'ssap://com.webos.service.ime/sendEnterKey', // Ch·ªçn
    //     arrowUp: 'ssap://com.webos.service.ime/sendKeyInput', // Ph√≠m m≈©i t√™n l√™n
    //     arrowDown: 'ssap://com.webos.service.ime/sendKeyInput', // Ph√≠m m≈©i t√™n xu·ªëng
    //     arrowLeft: 'ssap://com.webos.service.ime/sendKeyInput', // Ph√≠m m≈©i t√™n tr√°i
    //     arrowRight: 'ssap://com.webos.service.ime/sendKeyInput', // Ph√≠m m≈©i t√™n ph·∫£i
    //     play: 'ssap://media.controls/play', // Ph√°t
    //     pause: 'ssap://media.controls/pause', // T·∫°m d·ª´ng
    //     stop: 'ssap://media.controls/stop', // D·ª´ng ph√°t
    //     next: 'ssap://media.controls/next', // Chuy·ªÉn b√†i ti·∫øp theo
    //     previous: 'ssap://media.controls/previous', // Quay l·∫°i b√†i tr∆∞·ªõc
    //     openYouTube: 'ssap://system.launcher/launch', // M·ªü YouTube
    //     openNetflix: 'ssap://system.launcher/launch', // M·ªü Netflix
    //     openBrowser: 'ssap://system.launcher/open', // M·ªü tr√¨nh duy·ªát web
    // };

    // if (!commands[command]) {
    //     return res.status(400).json({ error: "L·ªánh kh√¥ng h·ª£p l·ªá" });
    // }

    const commands = [
        "ssap://api/getServiceList",
        "ssap://audio/getMute",
        "ssap://audio/getStatus",
        "ssap://audio/getVolume",
        "ssap://audio/setMute",
        "ssap://audio/setVolume",
        "ssap://audio/volumeDown",
        "ssap://audio/volumeUp",
        "ssap://com.webos.applicationManager/getForegroundAppInfo",
        "ssap://com.webos.applicationManager/listApps",
        "ssap://com.webos.applicationManager/listLaunchPoints",
        "ssap://com.webos.service.appstatus/getAppStatus",
        "ssap://com.webos.service.ime/deleteCharacters",
        "ssap://com.webos.service.ime/insertText",
        "ssap://com.webos.service.ime/registerRemoteKeyboard",
        "ssap://com.webos.service.ime/sendEnterKey",
        "ssap://com.webos.service.networkinput/getPointerInputSocket",
        "ssap://com.webos.service.secondscreen.gateway/test/secure",
        "ssap://com.webos.service.tv.display/get3DStatus",
        "ssap://com.webos.service.tv.display/set3DOff",
        "ssap://com.webos.service.tv.display/set3DOn",
        "ssap://media.controls/fastForward",
        "ssap://media.controls/pause",
        "ssap://media.controls/play",
        "ssap://media.controls/rewind",
        "ssap://media.controls/stop",
        "ssap://media.viewer/close",
        "ssap://media.viewer/open",
        "ssap://pairing/setPin",
        "ssap://system.launcher/close",
        "ssap://system.launcher/getAppState",
        "ssap://system.launcher/launch",
        "ssap://system.launcher/open",
        "ssap://system/getSystemInfo",
        "ssap://system/turnOff",
        "ssap://tv/channelDown",
        "ssap://tv/channelUp",
        "ssap://tv/getACRAuthToken",
        "ssap://tv/getChannelCurrentProgramInfo",
        "ssap://tv/getChannelList",
        "ssap://tv/getChannelProgramInfo",
        "ssap://tv/getCurrentChannel",
        "ssap://tv/getExternalInputList",
        "ssap://tv/openChannel",
        "ssap://tv/switchInput",
        "ssap://webapp/closeWebApp",
        "ssap://webapp/connectToApp",
        "ssap://webapp/isWebAppPinned",
        "ssap://webapp/launchWebApp",
        "ssap://webapp/pinWebApp",
        "ssap://webapp/removePinnedWebApp",
    ]

    const controlRequest = {
        type: "request",
        uri: command,
        payload: payload,
        clientKey: globalClientKey
    };

    globalWs.send(JSON.stringify(controlRequest));
    res.json({ message: "L·ªánh ƒë√£ g·ª≠i", command });
});

// Kh·ªüi ƒë·ªông server
app.listen(PORT, () => {
    console.log(`Server ƒëang ch·∫°y tr√™n c·ªïng ${PORT}`);
});
