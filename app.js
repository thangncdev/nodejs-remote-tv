const express = require("express");
const WebSocket = require("ws");
const bodyParser = require("body-parser");
const cors = require("cors");
const os = require("os");
const ip = require("ip");
const axios = require('axios');

const app = express();
app.use(cors());
app.use(bodyParser.json());

let foundTV = null;
let tvToken = null;
let globalWs = null; // Th√™m bi·∫øn ƒë·ªÉ l∆∞u WebSocket connection

// 1Ô∏è‚É£ L·∫•y d·∫£i m·∫°ng LAN hi·ªán t·∫°i (v√≠ d·ª•: 192.168.1.xxx)
function getLocalSubnet() {
    const localIp = ip.address();
    const subnet = localIp.substring(0, localIp.lastIndexOf(".") + 1); // L·∫•y ph·∫ßn "192.168.1."
    return subnet;
}

// 2Ô∏è‚É£ Qu√©t t·∫•t c·∫£ ƒë·ªãa ch·ªâ IP trong m·∫°ng LAN ƒë·ªÉ t√¨m TV
async function scanNetworkForSamsungTV() {
    const subnet = getLocalSubnet();
    console.log(`Scanning network: ${subnet}0/24`);

    for (let i = 5; i <= 10; i++) {
    const testIp = `${subnet}${i}`;
    if (await checkSamsungTV(testIp)) {
        foundTV = testIp;
        console.log(`‚úÖ Samsung TV found at: ${foundTV}`);
        return foundTV;
    }
    }
    console.log("‚ùå Kh√¥ng t√¨m th·∫•y TV Samsung!");
    return null;
}

// 3Ô∏è‚É£ Ki·ªÉm tra xem 1 ƒë·ªãa ch·ªâ IP c√≥ ph·∫£i TV Samsung kh√¥ng (th·ª≠ k·∫øt n·ªëi WebSocket)
function checkSamsungTV(ip) {
    return new Promise((resolve) => {
        axios.get(`http://${ip}:8001/api/v2/`, {
            timeout: 3000 // Timeout sau 3 gi√¢y
        })
        .then(response => {
            if (response.data && response.data.device) {
                console.log(`‚úÖ T√¨m th·∫•y TV Samsung: ${response.data.device.name}`);
                resolve(true);
            } else {
                console.log(`‚ùå Kh√¥ng ph·∫£i TV Samsung t·∫°i ${ip}`);
                resolve(false);
            }
        })
        .catch(error => {
            console.log(`‚ö†Ô∏è L·ªói k·∫øt n·ªëi ƒë·∫øn ${ip}:`, error.message);
            resolve(false);
        });
    });
}

// H√†m kh·ªüi t·∫°o k·∫øt n·ªëi WebSocket v√† duy tr√¨ n√≥
function initializeWebSocket() {
    if (globalWs && globalWs.readyState === WebSocket.OPEN) {
        return;
    }

    globalWs = new WebSocket(`wss://${foundTV}:8002/api/v2/channels/samsung.remote.control`, {
        rejectUnauthorized: false,
    });

    globalWs.on("open", () => {
        console.log("üîó K·∫øt n·ªëi WebSocket ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p");
        
        // Ch·ªâ g·ª≠i y√™u c·∫ßu gh√©p n·ªëi khi ch∆∞a c√≥ token
        if (!tvToken) {
            const pairingMessage = {
                method: "ms.channel.connect",
                params: {
                    "name": "RemoteControl",
                    "token": null, // Kh√¥ng g·ª≠i token trong l·∫ßn ƒë·∫ßu gh√©p n·ªëi
                    "appId": "12345"
                }
            };
            console.log("CONNECT", pairingMessage);
            
            globalWs.send(JSON.stringify(pairingMessage));
        }
    });

    globalWs.on("message", (data) => {
        const response = JSON.parse(data.toString());
        console.log("üì® Ph·∫£n h·ªìi t·ª´ TV:", response);
        if (response.data && response.data.token) {
            tvToken = response.data.token;
            console.log("‚úÖ ƒê√£ nh·∫≠n token t·ª´ TV");
        }
    });

    globalWs.on("close", () => {
        console.log("WebSocket ƒë√£ ƒë√≥ng, s·∫Ω th·ª≠ k·∫øt n·ªëi l·∫°i...");
        setTimeout(initializeWebSocket, 1000); // Th·ª≠ k·∫øt n·ªëi l·∫°i sau 1 gi√¢y
    });

    globalWs.on("error", (err) => {
        console.log("‚ö†Ô∏è L·ªói WebSocket:", err);
    });
}

// 4Ô∏è‚É£ G·ª≠i l·ªánh ƒëi·ªÅu khi·ªÉn ƒë·∫øn TV qua WebSocket
async function sendKeyCommand(command) {
    if (!foundTV) {
        console.log("Kh√¥ng t√¨m th·∫•y TV. Vui l√≤ng ch·∫°y t√¨m ki·∫øm tr∆∞·ªõc!");
        return;
    }

    if (!globalWs || globalWs.readyState !== WebSocket.OPEN) {
        console.log("ƒêang thi·∫øt l·∫≠p l·∫°i k·∫øt n·ªëi WebSocket...");
        initializeWebSocket();
        // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ k·∫øt n·ªëi ƒë∆∞·ª£c thi·∫øt l·∫≠p
        await new Promise(resolve => setTimeout(resolve, 1000));
    }

    const msg = {
        method: "ms.remote.control",
        params: {
            Cmd: "Click",
            DataOfCmd: command,
            Option: "false",
            TypeOfRemote: "SendRemoteKey",
            // token: `${tvToken}1`
        },
    };
    console.log("SEND COMMAND", msg);
    globalWs.send(JSON.stringify(msg));
    console.log(`üì° G·ª≠i l·ªánh: ${command}`);
}

// 5Ô∏è‚É£ API t√¨m TV
app.get("/find-tv", async (req, res) => {
    const ip = await scanNetworkForSamsungTV();
    if (ip) {
        initializeWebSocket(); // Kh·ªüi t·∫°o WebSocket connection
        res.json({ message: "T√¨m th·∫•y TV!", ip });
    } else {
        res.status(500).json({ message: "Kh√¥ng t√¨m th·∫•y TV!" });
    }
});

// 6Ô∏è‚É£ API g·ª≠i l·ªánh ƒëi·ªÅu khi·ªÉn
app.post("/send-command", async (req, res) => {
    const { command } = req.body;
    if (!command) {
        return res.status(400).json({ message: "Thi·∫øu l·ªánh ƒëi·ªÅu khi·ªÉn!" });
    }

    await sendKeyCommand(command);
    res.json({ message: `ƒê√£ g·ª≠i l·ªánh: ${command}` });
});

// Ch·∫°y server
const PORT = 3000;
app.listen(PORT, () => {
    console.log(`üöÄ Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
});